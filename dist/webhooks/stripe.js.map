{"version":3,"sources":["../../src/webhooks/stripe.ts"],"sourcesContent":["import config from '@config';\nimport type { RequestWithWebhook } from '@interfaces/request';\nimport stripeHost from '@middlewares/stripe';\nimport { logger } from '@utils/logger';\nimport Stripe from 'stripe';\n\nconst { stripeENV } = config;\n\nconst stripe = new Stripe(stripeENV.KEY, {\n  apiVersion: '2023-08-16',\n});\n\nconst StripeWebhook = ({ app }) => {\n  app.post(\n    '/webhook',\n    stripeHost(async (req: RequestWithWebhook, res, next) => {\n      try {\n        const { event } = req;\n        switch (event.type) {\n          case 'payment_intent.succeeded':\n            const stripeObject: Stripe.PaymentIntent = event.data.object as Stripe.PaymentIntent;\n            logger.info(`ðŸ’° PaymentIntent status: ${stripeObject.status}`);\n            break;\n          default:\n            logger.info(`Unhandled event type ${event.type}`);\n        }\n        res.json({ received: true });\n      } catch (error) {\n        logger.error(error);\n        next(error);\n      }\n    }, stripe),\n  );\n};\n\nexport default StripeWebhook;\n"],"names":["stripeENV","config","stripe","Stripe","KEY","apiVersion","StripeWebhook","app","post","stripeHost","req","res","next","event","type","stripeObject","data","object","logger","info","status","json","received","error"],"mappings":";;;;+BAmCA;;;eAAA;;;+DAnCmB;+DAEI;wBACA;gEACJ;;;;;;AAEnB,MAAM,EAAEA,SAAS,EAAE,GAAGC,eAAM;AAE5B,MAAMC,SAAS,IAAIC,gBAAM,CAACH,UAAUI,GAAG,EAAE;IACvCC,YAAY;AACd;AAEA,MAAMC,gBAAgB,CAAC,EAAEC,GAAG,EAAE;IAC5BA,IAAIC,IAAI,CACN,YACAC,IAAAA,eAAU,EAAC,OAAOC,KAAyBC,KAAKC;QAC9C,IAAI;YACF,MAAM,EAAEC,KAAK,EAAE,GAAGH;YAClB,OAAQG,MAAMC,IAAI;gBAChB,KAAK;oBACH,MAAMC,eAAqCF,MAAMG,IAAI,CAACC,MAAM;oBAC5DC,cAAM,CAACC,IAAI,CAAC,CAAC,yBAAyB,EAAEJ,aAAaK,MAAM,CAAC,CAAC;oBAC7D;gBACF;oBACEF,cAAM,CAACC,IAAI,CAAC,CAAC,qBAAqB,EAAEN,MAAMC,IAAI,CAAC,CAAC;YACpD;YACAH,IAAIU,IAAI,CAAC;gBAAEC,UAAU;YAAK;QAC5B,EAAE,OAAOC,OAAO;YACdL,cAAM,CAACK,KAAK,CAACA;YACbX,KAAKW;QACP;IACF,GAAGrB;AAEP;MAEA,WAAeI"}