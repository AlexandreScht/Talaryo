{"version":3,"sources":["../../src/services/users.ts"],"sourcesContent":["import { ExpiredSessionError, InvalidCredentialsError, InvalidSessionError, ServicesError } from '@exceptions';\nimport type { AuthRegister, TokenUser } from '@interfaces/auth';\nimport { UserModel, UserShape } from '@models/users';\nimport { hash } from 'bcrypt';\nimport type { Knex } from 'knex';\nimport { Transaction } from 'objection';\nimport { Service } from 'typedi';\nimport { v4 as uuid } from 'uuid';\n\n@Service()\nclass UsersServiceFile {\n  get getModel(): Knex<any, any[]> {\n    return UserModel.knex();\n  }\n\n  public async findUserById(id: number): Promise<[boolean, UserModel?]> {\n    try {\n      const findUser: UserModel = await UserModel.query().findById(id);\n      if (!findUser) {\n        return [true];\n      }\n      return [false, findUser];\n    } catch (err) {\n      throw new ServicesError();\n    }\n  }\n\n  public async findUserByEmail(email: string): Promise<[boolean, UserModel?]> {\n    try {\n      const findUser: UserModel = await UserModel.query().findOne({ email });\n      if (!findUser) {\n        return [true];\n      }\n      return [false, findUser];\n    } catch (error) {\n      console.log(error);\n\n      throw new ServicesError();\n    }\n  }\n\n  public async findUserOAuth(email: string): Promise<[boolean, UserModel?]> {\n    try {\n      const findUser: UserModel = await UserModel.query().findOne({ email }).whereNull('password');\n      if (!findUser) {\n        return [true];\n      }\n      return [false, findUser];\n    } catch (error) {\n      throw new ServicesError();\n    }\n  }\n\n  public async register(userData: AuthRegister, trx?: Transaction): Promise<UserModel> {\n    try {\n      if (userData?.password) {\n        const hashedPassword = await hash(userData.password, 10);\n        return await UserModel.query(trx).insert({ ...userData, password: hashedPassword, accessToken: uuid().replace(/-/g, '') });\n      }\n      return await UserModel.query().insert({ ...userData, validate: true });\n    } catch (error) {\n      console.log(error);\n\n      throw new ServicesError();\n    }\n  }\n\n  public async login(userData: UserModel, password: string): Promise<UserShape> {\n    try {\n      if (await userData.checkPassword(password)) {\n        return userData;\n      }\n    } catch (error) {\n      throw new ServicesError();\n    }\n    throw new InvalidCredentialsError('Email or Password is incorrect');\n  }\n\n  public async setRefreshToken(userData: UserModel, refreshToken: string): Promise<void> {\n    try {\n      const updatedCount = await UserModel.query().findById(userData.id).update({ refreshToken });\n      if (updatedCount) return;\n    } catch (error) {\n      throw new ServicesError();\n    }\n    throw new InvalidSessionError();\n  }\n\n  public async checkRefreshToken(userData: TokenUser): Promise<void> {\n    try {\n      const user = await UserModel.query().findById(userData.sessionId).select('refreshToken');\n\n      if (user && user.refreshToken === userData.refreshToken) return;\n    } catch (error) {\n      throw new ServicesError();\n    }\n    throw new ExpiredSessionError();\n  }\n\n  public async ValidateUserAccount(token: string): Promise<void> {\n    try {\n      const updatedCount = await UserModel.query().where('accessToken', token).where('validate', false).patch({ validate: true, accessToken: null });\n\n      if (updatedCount) return;\n    } catch (error) {\n      console.log(error);\n\n      throw new ServicesError();\n    }\n    throw new InvalidSessionError();\n  }\n}\n\nexport default UsersServiceFile;\n"],"names":["UsersServiceFile","getModel","UserModel","knex","findUserById","id","findUser","query","findById","err","ServicesError","findUserByEmail","email","findOne","error","console","log","findUserOAuth","whereNull","register","userData","trx","password","hashedPassword","hash","insert","accessToken","uuid","replace","validate","login","checkPassword","InvalidCredentialsError","setRefreshToken","refreshToken","updatedCount","update","InvalidSessionError","checkRefreshToken","user","sessionId","select","ExpiredSessionError","ValidateUserAccount","token","where","patch","Service"],"mappings":"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"}