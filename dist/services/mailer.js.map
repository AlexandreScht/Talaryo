{"version":3,"sources":["../../src/services/mailer.ts"],"sourcesContent":["import config from '@config';\nimport { MailerError } from '@exceptions';\nimport fs from 'fs';\nimport nodemailer from 'nodemailer';\nimport { join } from 'path';\nimport { Service } from 'typedi';\nimport util from 'util';\n\nconst { mailer, FRONT_URL } = config;\n\n@Service()\nclass MailerServiceFile {\n  private transporter: nodemailer.Transporter;\n\n  constructor() {\n    this.transporter = nodemailer.createTransport({\n      host: mailer.HOST,\n      port: parseInt(mailer.PORT),\n      secure: true,\n      auth: {\n        user: mailer.USER,\n        pass: mailer.PASSWORD,\n      },\n    });\n  }\n\n  private async sendMailAsync(mailOptions: nodemailer.SendMailOptions): Promise<void> {\n    try {\n      const sendMail = util.promisify(this.transporter.sendMail).bind(this.transporter);\n\n      await sendMail(mailOptions);\n    } catch (error) {\n      throw new MailerError();\n    }\n  }\n\n  public async Confirmation(email: string, firstName: string, userToken: string): Promise<void> {\n    try {\n      const templateDir: string = join(__dirname, mailer.DIR);\n      const confirmationEmail = fs.readFileSync(join(templateDir, 'confirmation-mail.html'), { encoding: 'utf-8' });\n      const htmlMailer = confirmationEmail.replace('{{url}}', FRONT_URL + `?token=${encodeURIComponent(userToken)}`).replace('{{user}}', firstName);\n\n      const mailOptions = {\n        from: mailer.USER,\n        to: email,\n        subject: \"Confirmation d'email typescriptTest\",\n        html: htmlMailer,\n      };\n\n      await this.sendMailAsync(mailOptions);\n    } catch (error) {\n      throw new MailerError();\n    }\n  }\n}\n\nexport default MailerServiceFile;\n"],"names":["mailer","FRONT_URL","config","MailerServiceFile","sendMailAsync","mailOptions","sendMail","util","promisify","transporter","bind","error","MailerError","Confirmation","email","firstName","userToken","templateDir","join","__dirname","DIR","confirmationEmail","fs","readFileSync","encoding","htmlMailer","replace","encodeURIComponent","from","USER","to","subject","html","constructor","nodemailer","createTransport","host","HOST","port","parseInt","PORT","secure","auth","user","pass","PASSWORD","Service"],"mappings":";;;;+BAwDA;;;eAAA;;;+DAxDmB;4BACS;2DACb;mEACQ;sBACF;wBACG;6DACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEjB,MAAM,EAAEA,MAAM,EAAEC,SAAS,EAAE,GAAGC,eAAM;IAG9BC,oBADN;IAgBE,MAAcC,cAAcC,WAAuC,EAAiB;QAClF,IAAI;YACF,MAAMC,WAAWC,aAAI,CAACC,SAAS,CAAC,IAAI,CAACC,WAAW,CAACH,QAAQ,EAAEI,IAAI,CAAC,IAAI,CAACD,WAAW;YAEhF,MAAMH,SAASD;QACjB,EAAE,OAAOM,OAAO;YACd,MAAM,IAAIC,uBAAW;QACvB;IACF;IAEA,MAAaC,aAAaC,KAAa,EAAEC,SAAiB,EAAEC,SAAiB,EAAiB;QAC5F,IAAI;YACF,MAAMC,cAAsBC,IAAAA,UAAI,EAACC,WAAWnB,OAAOoB,GAAG;YACtD,MAAMC,oBAAoBC,WAAE,CAACC,YAAY,CAACL,IAAAA,UAAI,EAACD,aAAa,2BAA2B;gBAAEO,UAAU;YAAQ;YAC3G,MAAMC,aAAaJ,kBAAkBK,OAAO,CAAC,WAAWzB,YAAY,CAAC,OAAO,EAAE0B,mBAAmBX,WAAW,CAAC,EAAEU,OAAO,CAAC,YAAYX;YAEnI,MAAMV,cAAc;gBAClBuB,MAAM5B,OAAO6B,IAAI;gBACjBC,IAAIhB;gBACJiB,SAAS;gBACTC,MAAMP;YACR;YAEA,MAAM,IAAI,CAACrB,aAAa,CAACC;QAC3B,EAAE,OAAOM,OAAO;YACd,MAAM,IAAIC,uBAAW;QACvB;IACF;IAvCAqB,aAAc;QAFd,uBAAQxB,eAAR,KAAA;QAGE,IAAI,CAACA,WAAW,GAAGyB,mBAAU,CAACC,eAAe,CAAC;YAC5CC,MAAMpC,OAAOqC,IAAI;YACjBC,MAAMC,SAASvC,OAAOwC,IAAI;YAC1BC,QAAQ;YACRC,MAAM;gBACJC,MAAM3C,OAAO6B,IAAI;gBACjBe,MAAM5C,OAAO6C,QAAQ;YACvB;QACF;IACF;AA8BF;AA3CM1C;IADL2C,IAAAA,eAAO;;;GACF3C;MA6CN,WAAeA"}