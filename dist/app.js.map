{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import { Routes } from '@/interfaces/routes';\nimport config from '@config';\nimport { dbConnection } from '@database';\nimport { ErrorMiddleware } from '@middlewares/error';\nimport { logger, stream } from '@utils/logger';\nimport compression from 'compression';\nimport cookieParser from 'cookie-parser';\nimport cors from 'cors';\nimport type { NextFunction, Request, Response } from 'express';\nimport express from 'express';\nimport helmet from 'helmet';\nimport hpp from 'hpp';\nimport http from 'http';\nimport morgan from 'morgan';\nimport 'reflect-metadata';\n\nconst { log } = config;\nexport class App {\n  public app: express.Application;\n  public env: string;\n  public port: string | number;\n  private server: http.Server;\n\n  constructor(routes: Routes) {\n    this.app = express();\n    this.env = config.NODE_ENV || 'development';\n    this.port = config.PORT || 3005;\n    this.server = http.createServer(this.app);\n\n    this.connectToDatabase();\n    this.initializeMiddlewares();\n    this.initializeRoutes(routes);\n    this.initializeErrorHandling();\n    this.defaultError();\n  }\n\n  public listen() {\n    this.server.listen(this.port, () => {\n      logger.info(`======= Version: ${this.env} =======\n        ðŸš€ server listening on the port: ${this.port} ðŸš€`);\n    });\n  }\n\n  public getServer() {\n    return this.app;\n  }\n\n  private async connectToDatabase() {\n    await dbConnection();\n  }\n\n  private initializeMiddlewares() {\n    this.app.use(morgan(log.FORMAT, { stream }));\n    this.app.use(cors({ origin: config.ORIGIN, credentials: config.CREDENTIALS }));\n    this.app.use(hpp());\n    this.app.use(helmet());\n    this.app.use(compression());\n    this.initializeBodyContent();\n    this.app.use(express.urlencoded({ extended: true }));\n    this.app.use(cookieParser());\n  }\n\n  private initializeBodyContent() {\n    this.app.use((req: Request, res: Response, next: NextFunction) => {\n      //  for stripe webhook\n      if (req.url === '/api/webhook') {\n        express.raw({ type: 'application/json' })(req, res, next);\n      } else {\n        express.json()(req, res, next);\n      }\n    });\n  }\n\n  private initializeRoutes(routes: Routes) {\n    this.app.use('/api', routes.router);\n  }\n\n  private initializeErrorHandling() {\n    this.app.use(ErrorMiddleware);\n  }\n\n  private defaultError() {\n    this.app.use((req: Request, res: Response) => {\n      res.status(404).send({ error: `Cannot find or << ${req.method} >> is incorrect method at ${req.url}` });\n    });\n  }\n}\n"],"names":["App","log","config","listen","server","port","logger","info","env","getServer","app","connectToDatabase","dbConnection","initializeMiddlewares","use","morgan","FORMAT","stream","cors","origin","ORIGIN","credentials","CREDENTIALS","hpp","helmet","compression","initializeBodyContent","express","urlencoded","extended","cookieParser","req","res","next","url","raw","type","json","initializeRoutes","routes","router","initializeErrorHandling","ErrorMiddleware","defaultError","status","send","error","method","constructor","NODE_ENV","PORT","http","createServer"],"mappings":"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"}