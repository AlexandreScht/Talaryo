{"version":3,"sources":["../../src/libs/setToken.ts"],"sourcesContent":["import { UserModel } from '@/models/users';\nimport config from '@config';\nimport type { TokenData } from '@interfaces/auth';\nimport cookie from 'cookie';\nimport { SignJWT } from 'jose';\nimport { sign, type JwtPayload } from 'jsonwebtoken';\nimport parseDuration from 'parse-duration';\n\nconst createToken = async (user: UserModel): Promise<TokenData> => {\n  const { email, role, firstName } = user;\n  const { security } = config;\n\n  const dataStoredInToken: JwtPayload = { User: { role, firstName, email } };\n  const expiresIn = parseDuration(security.EXPRESS_IN) / 1000; // convert string in secondes\n  const token = await new SignJWT(dataStoredInToken)\n    .setProtectedHeader({ alg: 'HS256' })\n    .setIssuedAt()\n    .setExpirationTime(security.EXPRESS_IN)\n    .sign(new TextEncoder().encode(security.jwt.JWT_SECRET));\n\n  return { expiresIn, jwt: token };\n};\n\nconst createSession = (user: UserModel, refreshToken: string): { token: string; expiresIn: number } => {\n  const { id, role } = user;\n  const { security } = config;\n\n  const dataStoredInToken = { user: { sessionId: id, sessionRole: role, refreshToken } };\n  const expiresIn = parseDuration(security.EXPRESS_IN) / 1000;\n\n  return { token: sign(dataStoredInToken, security.session.SESSION_SECRET, { expiresIn }), expiresIn };\n};\n\nconst createCookie = (user: UserModel, refreshToken: string): string => {\n  const { FRONT_URL } = config;\n\n  const values = createSession(user, refreshToken);\n  return cookie.serialize('Authorization', values.token, {\n    httpOnly: true,\n    path: '/',\n    domain: new URL(FRONT_URL).hostname,\n    maxAge: values.expiresIn,\n    secure: process.env.NODE_ENV === 'production',\n  });\n};\n\nexport { createCookie, createToken };\n"],"names":["createCookie","createToken","user","email","role","firstName","security","config","dataStoredInToken","User","expiresIn","parseDuration","EXPRESS_IN","token","SignJWT","setProtectedHeader","alg","setIssuedAt","setExpirationTime","sign","TextEncoder","encode","jwt","JWT_SECRET","createSession","refreshToken","id","sessionId","sessionRole","session","SESSION_SECRET","FRONT_URL","values","cookie","serialize","httpOnly","path","domain","URL","hostname","maxAge","secure","process","env","NODE_ENV"],"mappings":";;;;;;;;;;;IA8CSA,YAAY;eAAZA;;IAAcC,WAAW;eAAXA;;;+DA7CJ;+DAEA;sBACK;8BACc;sEACZ;;;;;;AAE1B,MAAMA,cAAc,OAAOC;IACzB,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAEC,SAAS,EAAE,GAAGH;IACnC,MAAM,EAAEI,QAAQ,EAAE,GAAGC,eAAM;IAE3B,MAAMC,oBAAgC;QAAEC,MAAM;YAAEL;YAAMC;YAAWF;QAAM;IAAE;IACzE,MAAMO,YAAYC,IAAAA,sBAAa,EAACL,SAASM,UAAU,IAAI,MAAM,6BAA6B;IAC1F,MAAMC,QAAQ,MAAM,IAAIC,aAAO,CAACN,mBAC7BO,kBAAkB,CAAC;QAAEC,KAAK;IAAQ,GAClCC,WAAW,GACXC,iBAAiB,CAACZ,SAASM,UAAU,EACrCO,IAAI,CAAC,IAAIC,cAAcC,MAAM,CAACf,SAASgB,GAAG,CAACC,UAAU;IAExD,OAAO;QAAEb;QAAWY,KAAKT;IAAM;AACjC;AAEA,MAAMW,gBAAgB,CAACtB,MAAiBuB;IACtC,MAAM,EAAEC,EAAE,EAAEtB,IAAI,EAAE,GAAGF;IACrB,MAAM,EAAEI,QAAQ,EAAE,GAAGC,eAAM;IAE3B,MAAMC,oBAAoB;QAAEN,MAAM;YAAEyB,WAAWD;YAAIE,aAAaxB;YAAMqB;QAAa;IAAE;IACrF,MAAMf,YAAYC,IAAAA,sBAAa,EAACL,SAASM,UAAU,IAAI;IAEvD,OAAO;QAAEC,OAAOM,IAAAA,kBAAI,EAACX,mBAAmBF,SAASuB,OAAO,CAACC,cAAc,EAAE;YAAEpB;QAAU;QAAIA;IAAU;AACrG;AAEA,MAAMV,eAAe,CAACE,MAAiBuB;IACrC,MAAM,EAAEM,SAAS,EAAE,GAAGxB,eAAM;IAE5B,MAAMyB,SAASR,cAActB,MAAMuB;IACnC,OAAOQ,eAAM,CAACC,SAAS,CAAC,iBAAiBF,OAAOnB,KAAK,EAAE;QACrDsB,UAAU;QACVC,MAAM;QACNC,QAAQ,IAAIC,IAAIP,WAAWQ,QAAQ;QACnCC,QAAQR,OAAOtB,SAAS;QACxB+B,QAAQC,QAAQC,GAAG,CAACC,QAAQ,KAAK;IACnC;AACF"}