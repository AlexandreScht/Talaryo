{"version":3,"sources":["../../src/controllers/scrapping.ts"],"sourcesContent":["import { ScrappingSource, sources } from '@/interfaces/scrapping';\nimport serializeLoc from '@/libs/serializeLoc';\nimport sitesUri from '@/libs/sites';\nimport auth from '@/middlewares/auth';\nimport FavorisServiceFile from '@/services/favoris';\nimport ScrapperServiceFile from '@/services/scrapper';\nimport { numberValidator, stringValidator } from '@libs/validate';\nimport mw from '@middlewares/mw';\nimport validator from '@middlewares/validator';\nimport Container from 'typedi';\n\nconst ScrappingController = ({ app }) => {\n  const ScrapperServices = Container.get(ScrapperServiceFile);\n  const FavorisServices = Container.get(FavorisServiceFile);\n  app.get(\n    '/scrapping',\n    mw([\n      auth(),\n      validator({\n        query: {\n          platform: stringValidator.required(),\n          fn: stringValidator,\n          industry: stringValidator,\n          sector: stringValidator,\n          skill: stringValidator,\n          key: stringValidator,\n          loc: stringValidator,\n          Nindustry: stringValidator,\n          Nskill: stringValidator,\n          Nkey: stringValidator,\n          time: stringValidator,\n          zone: stringValidator,\n          start: numberValidator,\n          index: numberValidator,\n        },\n      }),\n      async ({\n        locals: {\n          query: { platform, fn, industry, sector, skill, key, loc, Nindustry, Nskill, Nkey, time, zone, index = 50, start = 0 },\n        },\n        session: { sessionId },\n        res,\n        next,\n      }) => {\n        try {\n          const Searches: ScrappingSource[] = [];\n          const queries = { fn, industry, sector, skill, key, loc, Nindustry, Nskill, Nkey };\n          const sources: sources[] = platform.split(',');\n\n          sources.forEach((s: sources) => {\n            const url = Object.keys(queries).reduce((acc, key) => {\n              if (key === 'fn') {\n                const str = queries[key].split(',').map((v: string) => `intitle:${v.replaceAll(' ', '-')}`);\n                return (acc += ` ${str.join(' | ')}`);\n              }\n              if (key === 'industry') {\n                const str = queries[key].split(',').map((v: string) => `inanchor:${v.replaceAll(' ', '-')}`);\n                return (acc += ` ${str.join(' | ')}`);\n              }\n              if (key === 'skill' || key === 'key') {\n                const str = queries[key].split(',').map((v: string) => v.replaceAll(' ', '-'));\n                return (acc += ` ${str.join('&')}`);\n              }\n              if (key === 'sector') {\n                const str = queries[key].split(',').map((v: string) => v.replaceAll(' ', '-'));\n                return (acc += ` ${str.join(' | ')}`);\n              }\n              if (key === 'Nindustry') {\n                const str = queries[key].split(',').map((v: string) => `-inanchor:${v.replaceAll(' ', '-')}`);\n                return (acc += ` ${str.join(' | ')}`);\n              }\n              if (key === 'Nskill' || key === 'Nkey') {\n                const str = queries[key].split(',').map((v: string) => `-${v.replaceAll(' ', '-')}`);\n                return (acc += ` ${str.join(' | ')}`);\n              }\n              if (key === 'loc') {\n                return (acc += ` ${serializeLoc(loc, zone)}`);\n              }\n              return acc;\n            }, sitesUri(s));\n\n            Searches.push({\n              url: `https://www.google.com/search?client=opera&q=${encodeURIComponent(url)}&start=${start}&num=${index}`,\n              site: s,\n              current: time ?? false,\n            });\n          });\n\n          const result = await ScrapperServices.scrape(Searches);\n          const favMap = await FavorisServices.findAllUserFav(sessionId, result.scrape);\n          const links = result.scrape.map(obj => ({\n            ...obj,\n            favFolderId: favMap.get(obj.link) || undefined,\n          }));\n\n          res.send({ res: links, data: { start, index, number: result.number } });\n        } catch (error) {\n          next(error);\n        }\n      },\n    ]),\n  );\n};\nexport default ScrappingController;\n"],"names":["ScrappingController","app","ScrapperServices","Container","get","ScrapperServiceFile","FavorisServices","FavorisServiceFile","mw","auth","validator","query","platform","stringValidator","required","fn","industry","sector","skill","key","loc","Nindustry","Nskill","Nkey","time","zone","start","numberValidator","index","locals","session","sessionId","res","next","Searches","queries","sources","split","forEach","s","url","Object","keys","reduce","acc","str","map","v","replaceAll","join","serializeLoc","sitesUri","push","encodeURIComponent","site","current","result","scrape","favMap","findAllUserFav","links","obj","favFolderId","link","undefined","send","data","number","error"],"mappings":"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"}