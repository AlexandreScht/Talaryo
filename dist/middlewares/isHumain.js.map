{"version":3,"sources":["../../src/middlewares/isHumain.ts"],"sourcesContent":["import config from '@/config';\nimport type { ctx } from '@/interfaces/request';\nimport { InvalidIdentityError, ServerException } from '@exceptions';\nimport fetch from 'node-fetch';\ntype isHumainLocals = { body: { token: string } };\n\nconst isHumain = () => {\n  return async (ctx: ctx) => {\n    const { next, locals } = ctx;\n\n    try {\n      const {\n        body: { token },\n      } = locals as isHumainLocals;\n\n      const response = await fetch(`https://www.google.com/recaptcha/api/siteverify?secret=${config.reCaptcha}&response=${token}`, {\n        method: 'POST',\n      });\n\n      const data: { success?: boolean } = await response.json();\n\n      if (!data.success) {\n        throw new InvalidIdentityError();\n      }\n\n      next();\n    } catch (error) {\n      throw new ServerException(500, error);\n    }\n  };\n};\n\nexport default isHumain;\n"],"names":["isHumain","ctx","next","locals","body","token","response","fetch","config","reCaptcha","method","data","json","success","InvalidIdentityError","error","ServerException"],"mappings":";;;;+BAgCA;;;eAAA;;;+DAhCmB;4BAEmC;kEACpC;;;;;;AAGlB,MAAMA,WAAW;IACf,OAAO,OAAOC;QACZ,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAE,GAAGF;QAEzB,IAAI;YACF,MAAM,EACJG,MAAM,EAAEC,KAAK,EAAE,EAChB,GAAGF;YAEJ,MAAMG,WAAW,MAAMC,IAAAA,kBAAK,EAAC,CAAC,uDAAuD,EAAEC,eAAM,CAACC,SAAS,CAAC,UAAU,EAAEJ,MAAM,CAAC,EAAE;gBAC3HK,QAAQ;YACV;YAEA,MAAMC,OAA8B,MAAML,SAASM,IAAI;YAEvD,IAAI,CAACD,KAAKE,OAAO,EAAE;gBACjB,MAAM,IAAIC,gCAAoB;YAChC;YAEAZ;QACF,EAAE,OAAOa,OAAO;YACd,MAAM,IAAIC,2BAAe,CAAC,KAAKD;QACjC;IACF;AACF;MAEA,WAAef"}